IEEGPortal Matlab Analysis Toolbox
This toolbox was designed to provide tools that facilitate analysis and interface with the IEEGPortal

Features:
Parallel processing

Toolbox Example pipeline
1. Mark example patterns
	- manually mark on portal
	- uploadAnnotations.m

2. Optimize line length parameters for training patterns
	- getAllAnnots.m to get annotations from training layer
	- Calculate running line length across data
		- calcRunningFeatures.m	

3. Use optimized line length to detect all candidate patterns
	a. Tool to view line length overplayed on each marked patterns as well as not-marked detections
		- Gives users the options to manually overwrite and test parameters 	
		- Mark true and false detections as well
	b. Store in candidate annotation layer w
		-uploadAnnotations.m
	c. Create training_layer - to contain annotations from candidate_layer that intersect with original markings Part 1) layer as well as any new true markings from (Part 3a).
	d. Create false detections layer from 3a

4. Extract list of features from training layer and candidate layer
	- for each dataset i
		- for each layer j
			- getAllAnnots.m
			- calcFeaturesInAnnots.m
				- Wrapper to cycle through annots
				- Calculate features for annot
					- defaultFeatures.m (JM)
					- <user provided feat>.m
		- output: allData(i).<layerName(j)>Features = numAnnot x numFeat array

5. Train algorithm(s) on training layer
	- getAllAnnots
	- Create class labels
	- Run classifier
		- Option for CV
		- defaultClassifiers.m
		- <user specified>
6. Classify candidate patterns using variety of algorithms
	- defaultClassifiers.m
	- <user specified>
7. Validate detections and tune algorithm if necessary
	- Should also use tool from 3a.
	- Discuss other techniques

8. Upload final detections as annotations
	-uploadAnnotations.m






Functions
-Utilities
-Analysis
	-Detectors
	-Clustering algorithms