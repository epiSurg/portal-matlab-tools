
function feats = features_comprehensive(data, fs,varargin)

%     %power from 1-48hz 
%     freqRange = 1:48;
%     P = pmtm(data,[],size(data,1),fs);
%     feats = log10(abs(P(freqRange,:)))';
%     feats = reshape(feats, 1,[]);


   nChan = size(data,2);
   if ~any(any(isnan(data))) 
        P = pmtm(data,[],1:fs/2,fs);

        binSize = 5; %hz
        freqBins = 1:binSize:size(P,1);
        Pbins = zeros(numel(freqBins),size(data,2));
        for i = 1:numel(freqBins)-1
            Pbins(i,:) = sum(P(freqBins(i):freqBins(i+1),:));
        end

        Pbins = log10(abs(Pbins));
        feats = reshape(Pbins, 1,[]);
        fc = corr(P);
        fc = triu(fc,1);
        fc = fc(fc~=0)';

        %correlation between channels
        %feats = [feats triu(corrcoef(data),-1)];

        %cross correlation
        [acor, lag] = xcorr(data,round(.25*fs),'coeff');
        [r,c] = find(acor == max(max(acor)));
        r =r(1);
        toadd = reshape(acor(r,:),size(data,2),[]);
        toadd = toadd(find(~tril(ones(size(toadd)))))';
        
        %% add wavelets for spike
        scales = 1:60;
        coeffs = zeros(size(data,2),numel(scales)*size(data,1));
        for j = 1:size(data,2)
            coeffs(j,:) = reshape(cwt(data,scales,'mexh'),1,numel(scales)*size(data,1));
        end
        coeffs = abs(coeffs);
        norm_coeffs = bsxfun(@minus, coeffs, min(coeffs,[],2));
        divnorm = (max(coeffs,[],2)-min(coeffs,[],2));
        norm_coeffs = bsxfun (@rdivide, norm_coeffs, divnorm);
%         colMeans = mean(spike_norm_coeffs);
%         %sub colmeans
%         spike_norm_coeffs_centered = bsxfun (@minus, spike_norm_coeffs, colMeans);
%         [evectors, score, evalues] = pca(spike_norm_coeffs_centered);
%         feats = score;


        feats = [feats toadd fc bandpower(data) norm_coeffs];
        info.cwtidx = size(feats,2)-numel(norm_coeffs);
    else
        feats = NaN(1,896);
    end
    
end